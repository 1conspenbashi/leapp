name: Leapp Desktop App CD test

on:
  push:
    branches:
      - 'LEAP-635-finalize-release-pipeline-automate-fix'

env:
  CERTIFICATE_APPLICATION_OSX_P12: ${{ secrets.CERTIFICATE_APPLICATION_OSX_P12 }}
  CERTIFICATE_OSX_P12: ${{ secrets.CERTIFICATE_OSX_P12 }}
  DECODE_PASSWORD: ${{ secrets.DECODE_PASSWORD }}
  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  WIN_CERTIFICATE: ${{ secrets.WIN_CERTIFICATE }}
  WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

jobs:
  tag-validation:
    outputs:
      validator: ${{ steps.validator.outputs.VALID_TAG }}
      tag-version: ${{ steps.validator.outputs.TAG_VERSION }}
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: 'LEAP-635-finalize-release-pipeline-automate-fix'

      - name: Check Tag Validity
        id: validator
        run: |
          git fetch
          LOG=$(git log --format="%H" -n 1)
          TAG=$(git tag --contains $LOG)
          REGEX="^v[0-9]+\.[0-9]+.[0-9]+"
          if [[ $TAG =~ $REGEX ]]; then IS_VALID_TAG=1; else IS_VALID_TAG=0; fi;
          echo "::set-output name=VALID_TAG::$IS_VALID_TAG"
          echo "::set-output name=TAG_VERSION::$TAG"

      - name: If valid tag set
        if: steps.validator.outputs.VALID_TAG == 1
        run: |
          echo "Valid Tag Found - Building Desktop App..."

      - name: If not valid tag set
        if: steps.validator.outputs.VALID_TAG != 1
        run: |
          echo "Not a Desktop App Release Tag or Invalid one Found - Exiting..."
  build-win:
    strategy:
      matrix:
        os: [ windows-2022 ]
        node_version: [ 16 ]
    runs-on: ${{ matrix.os }}
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - name: Prepare GIT
        shell: bash
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3
        with:
          ref: 'LEAP-635-finalize-release-pipeline-automate-fix'
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}

      - name: Set pro environment
        shell: bash
        run: npm run set-pro-environment

      - name: Bootstrap
        shell: bash
        run: npm run bootstrap

      - name: Build Win desktop app
        shell: bash
        run: |
          cd packages/desktop-app
          WIN_CERTIFICATE=windows_sign_certificate.pfx
          echo "Recreate the window certificate from the secure environment variable"
          echo "${{ env.WIN_CERTIFICATE }}" | base64 --decode > $WIN_CERTIFICATE
          npm install
          npm run release-win
          rm -Rf ./release/win-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml
          TAG_VERSION=${{ needs.tag-validation.outputs.tag-version }}
          TAG_VERSION=${TAG_VERSION:1}
          rm "./release/Leapp-$TAG_VERSION-win.zip"
          powershell "Compress-Archive './release/Leapp Setup $TAG_VERSION.exe' './release/Leapp-$TAG_VERSION-win.zip'"

  build-linux:
    runs-on: ubuntu-latest
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'LEAP-635-finalize-release-pipeline-automate-fix'

      - name: Build Linux desktop app
        run: |
          cd packages/desktop-app
          npm install
          npm run release-linux
          rm -Rf ./release/linux-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml

  build-macos-x64:
    runs-on: macos-latest
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'LEAP-635-finalize-release-pipeline-automate-fix'

      - name: Build macOS desktop app build
        uses: nick-fields/retry@v2
        env:
          APPLE_NOTARISATION_PASSWORD: ${{ secrets.APPLE_NOTARISATION_PASSWORD }}
        with:
          timeout_minutes: 16
          max_attempts: 5
          command: cd packages/desktop-app && chmod +x scripts/macos-build.sh && ./scripts/macos-build.sh set-target-x64

      - name: Clean build
        run: |
          cd packages/desktop-app
          rm -Rf ./release/mac
          rm -Rf ./release/mac-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml
          TAG_VERSION=${{ needs.tag-validation.outputs.tag-version }}
          TAG_VERSION=${TAG_VERSION:1}
          rm "./release/Leapp-$TAG_VERSION-mac.zip"
          rm "./release/Leapp-$TAG_VERSION-mac.zip.blockmap"
          zip "./release/Leapp-$TAG_VERSION-mac.zip" "./release/Leapp-$TAG_VERSION.dmg"

  build-macos-arm:
    runs-on: macos-latest
    needs: [ tag-validation, build-macos-x64 ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'LEAP-635-finalize-release-pipeline-automate-fix'

      - name: Build macOS desktop app
        uses: nick-fields/retry@v2
        env:
          APPLE_NOTARISATION_PASSWORD: ${{ secrets.APPLE_NOTARISATION_PASSWORD }}
        with:
          timeout_minutes: 16
          max_attempts: 5
          command: cd packages/desktop-app && chmod +x scripts/macos-build.sh && ./scripts/macos-build.sh set-target-arm64

      - name: Clean build
        run: |
          cd packages/desktop-app
          rm -Rf ./release/mac
          rm -Rf ./release/mac-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml
          rm -Rf ./release/mac-arm64
          TAG_VERSION=${{ needs.tag-validation.outputs.tag-version }}
          TAG_VERSION=${TAG_VERSION:1}
          rm "./release/Leapp-$TAG_VERSION-arm64-mac.zip"
          rm "./release/Leapp-$TAG_VERSION-arm64-mac.zip.blockmap"
          zip "./release/Leapp-$TAG_VERSION-mac-arm64.zip" "./release/Leapp-$TAG_VERSION-arm64.dmg"
